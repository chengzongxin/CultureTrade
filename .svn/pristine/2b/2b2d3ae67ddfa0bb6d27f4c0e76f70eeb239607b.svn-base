//
//  SearchProductController.m
//  CultureTrade
//
//  Created by SZFT1 on 16/4/7.
//  Copyright © 2016年 cheng.zongxin. All rights reserved.
//

#import "SearchProductController.h"
#import "GlobalModel.h"
#import "QuotaAnalysisController.h"

@interface SearchProductController () <UISearchResultsUpdating,UITableViewDataSource,UITableViewDelegate,UISearchBarDelegate>
@end

@implementation SearchProductController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.searchController = [[UISearchController alloc] initWithSearchResultsController:nil];
    self.searchController.searchBar.delegate = self;
    self.searchController.searchResultsUpdater = self;
    self.searchController.dimsBackgroundDuringPresentation = false;
    [self.searchController.searchBar sizeToFit];
    self.searchController.searchBar.backgroundColor = [UIColor colorWithHexString:@"dcdcdc" withAlpha:1];
//    self.searchController.searchBar.showsBookmarkButton = YES;
    self.searchController.searchBar.showsCancelButton = YES;
//    self.searchController.searchBar.showsSearchResultsButton = YES;
    
//    self.navigationItem.leftBarButtonItem = nil;
//    self.navigationController.navigationItem.titleView = self.searchController.view;
    
    
    self.tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, ScreenSize.width, ScreenSize.height) style:UITableViewStylePlain];
    self.tableView.delegate = self;
    self.tableView.dataSource = self;
    self.tableView.backgroundColor = COLOR_QUOTA_TABLE_BG;
    self.tableView.tableHeaderView = self.searchController.searchBar;
    self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    [self.view addSubview:self.tableView];
    
    [self.searchController.searchBar becomeFirstResponder];
    
    
    
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    self.tableView.hidden = NO;
    [UIApplication sharedApplication].statusBarHidden = YES;
    
    _codeArray = [NSMutableArray array];
    for (SortUnit *s in GLOBAL.sortUnitArray) {
        [_codeArray addObject:[NSString stringWithFormat:@"%d",s.m_CodeInfo.m_uiCode]];
    }
    
    self.searchController.searchBar.text = nil;
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    
    [UIApplication sharedApplication].statusBarHidden = NO;
    if (self.searchController.active) {
        self.searchController.active = NO;
//        [self.searchController.searchBar removeFromSuperview];
    }
}

- (void)updateSearchResultsForSearchController:(UISearchController *)searchController{

    [self.filterCodeArray removeAllObjects];
    NSPredicate *searchPredicate = [NSPredicate predicateWithFormat:@"SELF CONTAINS[c] %@", self.searchController.searchBar.text];
    self.filterCodeArray = [[self.codeArray filteredArrayUsingPredicate:searchPredicate] mutableCopy];
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.tableView reloadData];
    });
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (!self.searchController.active) {
        return self.codeArray.count;
    } else {
        return self.filterCodeArray.count;
    }
    /*
     if (!self.searchController.active) {
     return self.codeArray.count;
     } else {
     if (self.filterCodeArray.count == 0) {
     return self.codeArray.count;
     }else{
     return self.filterCodeArray.count;
     }
     }
     */
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *CellIdentifier = @"SearchCell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        cell.backgroundColor = COLOR_QUOTA_CELL_BG;
        cell.textLabel.textColor = [UIColor whiteColor];
    }
    // 根据UISearchController的active属性来判断cell中的内容
    if (!self.searchController.active) {
        cell.textLabel.text = self.codeArray[indexPath.row];
    } else {
        cell.textLabel.text = self.filterCodeArray[indexPath.row];
    }
    
    /*if (!self.searchController.active) {
        cell.textLabel.text = self.codeArray[indexPath.section];
    } else {
        if (self.filterCodeArray.count == 0) {
            cell.textLabel.text = self.codeArray[indexPath.section];
        }else{
            cell.textLabel.text = self.filterCodeArray[indexPath.row];
        }
    }*/
    return cell;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSString *code;
    if (!self.searchController.active) {
        code = self.codeArray[indexPath.row];
    } else {
        code = self.filterCodeArray[indexPath.row];
    }
    
    for (SortUnit *sortUnit in GLOBAL.sortUnitArray) {
        if (sortUnit.m_CodeInfo.m_uiCode == [code intValue])
        {
            GLOBAL.sortUnit = sortUnit;
            break;
        }
    }
    
    for (StockInfoNS *stockInfo in GLOBAL.stockInfoArray) { // 获取缓存initmarket中对应的stockinfo对象
        if (stockInfo.m_uiCode == GLOBAL.sortUnit.m_CodeInfo.m_uiCode ) {
            GLOBAL.stockInfo = stockInfo;
            GLOBAL.sortUnit.m_uiPreClose = stockInfo.m_uiPrevClose;
        }
    }
    for (SymbolModel *symbol in GLOBAL.symbolArray) {
        if ([symbol.productID intValue] == GLOBAL.sortUnit.m_CodeInfo.m_uiCode ) {
            GLOBAL.symbolModel = symbol;
        }
    }
    self.tableView.hidden = YES;
    
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
//    [self presentViewController:[[QuotaAnalysisController alloc] init] animated:NO completion:nil];
    
    if (self.searchController.active) {
        [self dismissViewControllerAnimated:YES completion:^{
            [self presentViewController:[[QuotaAnalysisController alloc] init] animated:NO completion:nil];
        }];
    }else{
        [self presentViewController:[[QuotaAnalysisController alloc] init] animated:NO completion:nil];
    }
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar
{
    MYLOGFUN;
}

- (void)searchBarCancelButtonClicked:(UISearchBar *)searchBar
{
    MYLOGFUN;
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)searchBarBookmarkButtonClicked:(UISearchBar *)searchBar
{
    MYLOGFUN;
}
- (void)searchBarResultsListButtonClicked:(UISearchBar *)searchBar
{
    MYLOGFUN;
}

- (void)searchBar:(UISearchBar *)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope
{
    MYLOGFUN;
}

- (BOOL)searchBarShouldBeginEditing:(UISearchBar *)searchBar
{
    return YES;
}

/*
- (BOOL)searchBarShouldBeginEditing:(UISearchBar *)searchBar;                      // return NO to not become first responder
- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar;                     // called when text starts editing
- (BOOL)searchBarShouldEndEditing:(UISearchBar *)searchBar;                        // return NO to not resign first responder
- (void)searchBarTextDidEndEditing:(UISearchBar *)searchBar;                       // called when text ends editing
- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText;   // called when text changes (including clear)
- (BOOL)searchBar:(UISearchBar *)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text NS_AVAILABLE_IOS(3_0); // called before text changes

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar;                     // called when keyboard search button pressed
- (void)searchBarBookmarkButtonClicked:(UISearchBar *)searchBar __TVOS_PROHIBITED; // called when bookmark button pressed
- (void)searchBarCancelButtonClicked:(UISearchBar *)searchBar __TVOS_PROHIBITED;   // called when cancel button pressed
- (void)searchBarResultsListButtonClicked:(UISearchBar *)searchBar NS_AVAILABLE_IOS(3_2) __TVOS_PROHIBITED; // called when search results button pressed

- (void)searchBar:(UISearchBar *)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope NS_AVAILABLE_IOS(3_0);
*/
@end
